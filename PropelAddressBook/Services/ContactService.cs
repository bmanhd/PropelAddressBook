using AutoMapper;
using PropelAddressBook.Dtos;
using PropelAddressBook.Entities;
using PropelAddressBook.Mappers;
using System.Text.Json;

namespace PropelAddressBook.Services
{
    public class ContactService : IContactService
    {
        private readonly Mapper _mapperConfig = MapperConfig.InitializeAutomapper();
        private readonly List<Contact> _contacts;
        public ContactService()
        {
            _contacts = GetJson();
        }

        public static List<Contact> GetJson()
        {
            string fileName = "C:\\Users\\bmanzr\\Source\\Repos\\PropelAddressBook\\PropelAddressBook\\JSON\\addressBookData.json";
            string jsonString = File.ReadAllText(fileName);
            var test = JsonSerializer.Deserialize<List<Contact>>(jsonString);
            return test;
        }

        public ContactDto GetContactById(int id)
        {
            ;
            var contact = _contacts.FirstOrDefault(contact => contact.Id == id);

            if (contact == null)
                return null;

            return _mapperConfig.Map<ContactDto>(contact);
        }

        public IEnumerable<ContactDto> GetContacts()
        {
            var contacts = _contacts.Where(x => x.Active);

            if (contacts == null)
                return null;

            return _mapperConfig.Map<List<ContactDto>>(contacts);
        }

        public ContactDto CreateContact(ContactDto newContact)
        {
            //this data would normally be populated FE and the dto(param) in this method would be populated already
            var contact = new Contact
            {
                Id = newContact.Id, //Ids would be generated by Db save normally
                FirstName = newContact.FirstName,
                LastName = newContact.LastName,
                PhoneNumber = newContact.PhoneNumber,
                Address = newContact.Address != null ? new Address
                {
                    Id = newContact.Address.Id,
                    Name = newContact.Address.Name,
                    State = newContact.Address.State,
                    Postcode = newContact.Address.Postcode,
                    Active = true
                } : null,
                Active = true
            };

            _contacts.Add(contact);

            return _mapperConfig.Map<ContactDto>(contact);
        }

        public ContactDto UpdateContact(ContactDto updateContact)
        {
            var contact = _contacts.FirstOrDefault(contact => contact.Id == updateContact.Id);
            if (contact != null)
            {
                contact.FirstName = updateContact.FirstName;
                contact.LastName = updateContact.LastName;
                contact.PhoneNumber = updateContact.PhoneNumber;
                contact.Address = updateContact.Address != null ? new Address
                {
                    Id = updateContact.Address.Id,
                    Name = updateContact.Address.Name,
                    State = updateContact.Address.State,
                    Postcode = updateContact.Address.Postcode,
                    Active = true
                } : null;

                return _mapperConfig.Map<ContactDto>(contact);
            }

            return null;
        }

        public bool DeleteContact(int id)
        {
            var contact = _contacts.FirstOrDefault(contact => contact.Id == id);
            if (contact == null)
            {
                return false;
            }

            //delete used or update depending on operation required with actual data
            _contacts.Remove(contact);
            return true;
        }
    }
}
